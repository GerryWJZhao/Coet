// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoetServer.proto
// Original file comments:
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Coet.GrpcProto {
  public static class CoetLog
  {
    static readonly string __ServiceName = "Coet.GrpcProto.CoetLog";

    static readonly Marshaller<global::Coet.GrpcProto.SaveCoetLogParm> __Marshaller_SaveCoetLogParm = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coet.GrpcProto.SaveCoetLogParm.Parser.ParseFrom);
    static readonly Marshaller<global::Coet.GrpcProto.SaveCoetLogResult> __Marshaller_SaveCoetLogResult = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coet.GrpcProto.SaveCoetLogResult.Parser.ParseFrom);

    static readonly Method<global::Coet.GrpcProto.SaveCoetLogParm, global::Coet.GrpcProto.SaveCoetLogResult> __Method_SaveLog = new Method<global::Coet.GrpcProto.SaveCoetLogParm, global::Coet.GrpcProto.SaveCoetLogResult>(
        MethodType.Unary,
        __ServiceName,
        "SaveLog",
        __Marshaller_SaveCoetLogParm,
        __Marshaller_SaveCoetLogResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Coet.GrpcProto.CoetServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CoetLog</summary>
    public abstract class CoetLogBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Coet.GrpcProto.SaveCoetLogResult> SaveLog(global::Coet.GrpcProto.SaveCoetLogParm request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CoetLog</summary>
    public class CoetLogClient : ClientBase<CoetLogClient>
    {
      /// <summary>Creates a new client for CoetLog</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CoetLogClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CoetLog that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CoetLogClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CoetLogClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CoetLogClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Coet.GrpcProto.SaveCoetLogResult SaveLog(global::Coet.GrpcProto.SaveCoetLogParm request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveLog(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coet.GrpcProto.SaveCoetLogResult SaveLog(global::Coet.GrpcProto.SaveCoetLogParm request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveLog, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Coet.GrpcProto.SaveCoetLogResult> SaveLogAsync(global::Coet.GrpcProto.SaveCoetLogParm request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveLogAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Coet.GrpcProto.SaveCoetLogResult> SaveLogAsync(global::Coet.GrpcProto.SaveCoetLogParm request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveLog, null, options, request);
      }
      protected override CoetLogClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CoetLogClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CoetLogBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SaveLog, serviceImpl.SaveLog).Build();
    }

  }
  public static class CoetAnalyse
  {
    static readonly string __ServiceName = "Coet.GrpcProto.CoetAnalyse";

    static readonly Marshaller<global::Coet.GrpcProto.CoetLogSearchParm> __Marshaller_CoetLogSearchParm = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coet.GrpcProto.CoetLogSearchParm.Parser.ParseFrom);
    static readonly Marshaller<global::Coet.GrpcProto.CoetLogSearchResult> __Marshaller_CoetLogSearchResult = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coet.GrpcProto.CoetLogSearchResult.Parser.ParseFrom);

    static readonly Method<global::Coet.GrpcProto.CoetLogSearchParm, global::Coet.GrpcProto.CoetLogSearchResult> __Method_GetLog = new Method<global::Coet.GrpcProto.CoetLogSearchParm, global::Coet.GrpcProto.CoetLogSearchResult>(
        MethodType.Unary,
        __ServiceName,
        "GetLog",
        __Marshaller_CoetLogSearchParm,
        __Marshaller_CoetLogSearchResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Coet.GrpcProto.CoetServerReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of CoetAnalyse</summary>
    public abstract class CoetAnalyseBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Coet.GrpcProto.CoetLogSearchResult> GetLog(global::Coet.GrpcProto.CoetLogSearchParm request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CoetAnalyse</summary>
    public class CoetAnalyseClient : ClientBase<CoetAnalyseClient>
    {
      /// <summary>Creates a new client for CoetAnalyse</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CoetAnalyseClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CoetAnalyse that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CoetAnalyseClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CoetAnalyseClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CoetAnalyseClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Coet.GrpcProto.CoetLogSearchResult GetLog(global::Coet.GrpcProto.CoetLogSearchParm request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLog(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coet.GrpcProto.CoetLogSearchResult GetLog(global::Coet.GrpcProto.CoetLogSearchParm request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLog, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Coet.GrpcProto.CoetLogSearchResult> GetLogAsync(global::Coet.GrpcProto.CoetLogSearchParm request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLogAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Coet.GrpcProto.CoetLogSearchResult> GetLogAsync(global::Coet.GrpcProto.CoetLogSearchParm request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLog, null, options, request);
      }
      protected override CoetAnalyseClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CoetAnalyseClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CoetAnalyseBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetLog, serviceImpl.GetLog).Build();
    }

  }
}
#endregion
