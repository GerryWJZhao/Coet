// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoteServer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cote.GrpcProto {

  /// <summary>Holder for reflection information generated from CoteServer.proto</summary>
  public static partial class CoteServerReflection {

    #region Descriptor
    /// <summary>File descriptor for CoteServer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoteServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDb3RlU2VydmVyLnByb3RvEg5Db3RlLkdycGNQcm90byJECg9TYXZlQ290",
            "ZUxvZ1Bhcm0SMQoMQ29ldExvZ0luZm9zGAEgAygLMhsuQ290ZS5HcnBjUHJv",
            "dG8uQ29ldExvZ0luZm8iKQoRU2F2ZUNvdGVMb2dSZXN1bHQSFAoMRXhlY3V0",
            "ZUNvdW50GAEgASgFIkgKE0NvZXRMb2dTZWFyY2hSZXN1bHQSMQoMQ29ldExv",
            "Z0luZm9zGAEgAygLMhsuQ290ZS5HcnBjUHJvdG8uQ29ldExvZ0luZm8iTwoL",
            "Q29ldExvZ0luZm8SDAoEVHlwZRgBIAEoCRIQCghKc29uSW5mbxgCIAEoCRIO",
            "CgZTZW5kSVAYAyABKAkSEAoIU2VuZE5hbWUYBCABKAkiPwoRQ29ldExvZ1Nl",
            "YXJjaFBhcm0SFQoNU3RhcnREYXRlVGltZRgBIAEoCRITCgtFbmREYXRlVGlt",
            "ZRgCIAEoCTJaCgdDb2V0TG9nEk8KB1NhdmVMb2cSHy5Db3RlLkdycGNQcm90",
            "by5TYXZlQ290ZUxvZ1Bhcm0aIS5Db3RlLkdycGNQcm90by5TYXZlQ290ZUxv",
            "Z1Jlc3VsdCIAMmEKC0NvZXRBbmFseXNlElIKBkdldExvZxIhLkNvdGUuR3Jw",
            "Y1Byb3RvLkNvZXRMb2dTZWFyY2hQYXJtGiMuQ290ZS5HcnBjUHJvdG8uQ29l",
            "dExvZ1NlYXJjaFJlc3VsdCIAQghQAaICA0hMV2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cote.GrpcProto.SaveCoteLogParm), global::Cote.GrpcProto.SaveCoteLogParm.Parser, new[]{ "CoetLogInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cote.GrpcProto.SaveCoteLogResult), global::Cote.GrpcProto.SaveCoteLogResult.Parser, new[]{ "ExecuteCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cote.GrpcProto.CoetLogSearchResult), global::Cote.GrpcProto.CoetLogSearchResult.Parser, new[]{ "CoetLogInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cote.GrpcProto.CoetLogInfo), global::Cote.GrpcProto.CoetLogInfo.Parser, new[]{ "Type", "JsonInfo", "SendIP", "SendName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cote.GrpcProto.CoetLogSearchParm), global::Cote.GrpcProto.CoetLogSearchParm.Parser, new[]{ "StartDateTime", "EndDateTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SaveCoteLogParm : pb::IMessage<SaveCoteLogParm> {
    private static readonly pb::MessageParser<SaveCoteLogParm> _parser = new pb::MessageParser<SaveCoteLogParm>(() => new SaveCoteLogParm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveCoteLogParm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cote.GrpcProto.CoteServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveCoteLogParm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveCoteLogParm(SaveCoteLogParm other) : this() {
      coetLogInfos_ = other.coetLogInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveCoteLogParm Clone() {
      return new SaveCoteLogParm(this);
    }

    /// <summary>Field number for the "CoetLogInfos" field.</summary>
    public const int CoetLogInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cote.GrpcProto.CoetLogInfo> _repeated_coetLogInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Cote.GrpcProto.CoetLogInfo.Parser);
    private readonly pbc::RepeatedField<global::Cote.GrpcProto.CoetLogInfo> coetLogInfos_ = new pbc::RepeatedField<global::Cote.GrpcProto.CoetLogInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cote.GrpcProto.CoetLogInfo> CoetLogInfos {
      get { return coetLogInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveCoteLogParm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveCoteLogParm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coetLogInfos_.Equals(other.coetLogInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= coetLogInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      coetLogInfos_.WriteTo(output, _repeated_coetLogInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += coetLogInfos_.CalculateSize(_repeated_coetLogInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveCoteLogParm other) {
      if (other == null) {
        return;
      }
      coetLogInfos_.Add(other.coetLogInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            coetLogInfos_.AddEntriesFrom(input, _repeated_coetLogInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveCoteLogResult : pb::IMessage<SaveCoteLogResult> {
    private static readonly pb::MessageParser<SaveCoteLogResult> _parser = new pb::MessageParser<SaveCoteLogResult>(() => new SaveCoteLogResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveCoteLogResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cote.GrpcProto.CoteServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveCoteLogResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveCoteLogResult(SaveCoteLogResult other) : this() {
      executeCount_ = other.executeCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveCoteLogResult Clone() {
      return new SaveCoteLogResult(this);
    }

    /// <summary>Field number for the "ExecuteCount" field.</summary>
    public const int ExecuteCountFieldNumber = 1;
    private int executeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExecuteCount {
      get { return executeCount_; }
      set {
        executeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveCoteLogResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveCoteLogResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExecuteCount != other.ExecuteCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExecuteCount != 0) hash ^= ExecuteCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExecuteCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExecuteCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExecuteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExecuteCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveCoteLogResult other) {
      if (other == null) {
        return;
      }
      if (other.ExecuteCount != 0) {
        ExecuteCount = other.ExecuteCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExecuteCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoetLogSearchResult : pb::IMessage<CoetLogSearchResult> {
    private static readonly pb::MessageParser<CoetLogSearchResult> _parser = new pb::MessageParser<CoetLogSearchResult>(() => new CoetLogSearchResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoetLogSearchResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cote.GrpcProto.CoteServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogSearchResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogSearchResult(CoetLogSearchResult other) : this() {
      coetLogInfos_ = other.coetLogInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogSearchResult Clone() {
      return new CoetLogSearchResult(this);
    }

    /// <summary>Field number for the "CoetLogInfos" field.</summary>
    public const int CoetLogInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cote.GrpcProto.CoetLogInfo> _repeated_coetLogInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Cote.GrpcProto.CoetLogInfo.Parser);
    private readonly pbc::RepeatedField<global::Cote.GrpcProto.CoetLogInfo> coetLogInfos_ = new pbc::RepeatedField<global::Cote.GrpcProto.CoetLogInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cote.GrpcProto.CoetLogInfo> CoetLogInfos {
      get { return coetLogInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoetLogSearchResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoetLogSearchResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coetLogInfos_.Equals(other.coetLogInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= coetLogInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      coetLogInfos_.WriteTo(output, _repeated_coetLogInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += coetLogInfos_.CalculateSize(_repeated_coetLogInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoetLogSearchResult other) {
      if (other == null) {
        return;
      }
      coetLogInfos_.Add(other.coetLogInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            coetLogInfos_.AddEntriesFrom(input, _repeated_coetLogInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoetLogInfo : pb::IMessage<CoetLogInfo> {
    private static readonly pb::MessageParser<CoetLogInfo> _parser = new pb::MessageParser<CoetLogInfo>(() => new CoetLogInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoetLogInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cote.GrpcProto.CoteServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogInfo(CoetLogInfo other) : this() {
      type_ = other.type_;
      jsonInfo_ = other.jsonInfo_;
      sendIP_ = other.sendIP_;
      sendName_ = other.sendName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogInfo Clone() {
      return new CoetLogInfo(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "JsonInfo" field.</summary>
    public const int JsonInfoFieldNumber = 2;
    private string jsonInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonInfo {
      get { return jsonInfo_; }
      set {
        jsonInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SendIP" field.</summary>
    public const int SendIPFieldNumber = 3;
    private string sendIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendIP {
      get { return sendIP_; }
      set {
        sendIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SendName" field.</summary>
    public const int SendNameFieldNumber = 4;
    private string sendName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendName {
      get { return sendName_; }
      set {
        sendName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoetLogInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoetLogInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (JsonInfo != other.JsonInfo) return false;
      if (SendIP != other.SendIP) return false;
      if (SendName != other.SendName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (JsonInfo.Length != 0) hash ^= JsonInfo.GetHashCode();
      if (SendIP.Length != 0) hash ^= SendIP.GetHashCode();
      if (SendName.Length != 0) hash ^= SendName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (JsonInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonInfo);
      }
      if (SendIP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SendIP);
      }
      if (SendName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SendName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (JsonInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonInfo);
      }
      if (SendIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendIP);
      }
      if (SendName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoetLogInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.JsonInfo.Length != 0) {
        JsonInfo = other.JsonInfo;
      }
      if (other.SendIP.Length != 0) {
        SendIP = other.SendIP;
      }
      if (other.SendName.Length != 0) {
        SendName = other.SendName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            JsonInfo = input.ReadString();
            break;
          }
          case 26: {
            SendIP = input.ReadString();
            break;
          }
          case 34: {
            SendName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoetLogSearchParm : pb::IMessage<CoetLogSearchParm> {
    private static readonly pb::MessageParser<CoetLogSearchParm> _parser = new pb::MessageParser<CoetLogSearchParm>(() => new CoetLogSearchParm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoetLogSearchParm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cote.GrpcProto.CoteServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogSearchParm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogSearchParm(CoetLogSearchParm other) : this() {
      startDateTime_ = other.startDateTime_;
      endDateTime_ = other.endDateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoetLogSearchParm Clone() {
      return new CoetLogSearchParm(this);
    }

    /// <summary>Field number for the "StartDateTime" field.</summary>
    public const int StartDateTimeFieldNumber = 1;
    private string startDateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartDateTime {
      get { return startDateTime_; }
      set {
        startDateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EndDateTime" field.</summary>
    public const int EndDateTimeFieldNumber = 2;
    private string endDateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndDateTime {
      get { return endDateTime_; }
      set {
        endDateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoetLogSearchParm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoetLogSearchParm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartDateTime != other.StartDateTime) return false;
      if (EndDateTime != other.EndDateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartDateTime.Length != 0) hash ^= StartDateTime.GetHashCode();
      if (EndDateTime.Length != 0) hash ^= EndDateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartDateTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StartDateTime);
      }
      if (EndDateTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndDateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartDateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartDateTime);
      }
      if (EndDateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoetLogSearchParm other) {
      if (other == null) {
        return;
      }
      if (other.StartDateTime.Length != 0) {
        StartDateTime = other.StartDateTime;
      }
      if (other.EndDateTime.Length != 0) {
        EndDateTime = other.EndDateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StartDateTime = input.ReadString();
            break;
          }
          case 18: {
            EndDateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
